今天正式开始学习《深入理解Linux内核第三版》
第一章 基本概念
1、一般来说，对全局变量的安全访问通过原子操作来保证。以前的方法：非抢占式内核，关中断。效率都不高，甚至有浪费资源的表现。
2、一种广泛使用的机制是信号量。信号量仅仅是一个与数据结构相关的一个计数器，当所有的线程访问这个数据结构前，都要检查这个信号量。可以把信号量看成一个对象，其组成可以是：一个整数变量、一个等待进程的链表、两个原子方法（down,up）。
3、自旋锁的出现。如果更新数据结构所需的时间比较短，那么信号量可能是低效的。因为内核把进程插入信号量链表中，然后挂起它，比较费时间。在单核处理器下是没用得。
   自旋锁死锁例子，进程P1获得了a的权限，进程P2获得了b的权限。但是P1在等待b，P2在等待a。这会使得进程或者内核路径发生冻结现象。linux通常使用以下两种方法避免死锁，引入有限的信号量类型和以递增的顺序请求信号量。
4、信号和进程间通信，UNIX系统提供了一种把系统事件报告给进程的一种机制。每种事件都有自己的信号编号。例如：当用户按下ctrl+c时，即向前台进程发出中断信号SIGINT。
5、共享内存的实现，依赖于内核如何实现进程的地址空间。
6、进程管理，fork和exit系统调用分别用来创建一个新进程和终止一个进程。
   父进程通过wait系统调用，允许进程等待，直到其子进程之一结束，它返回被终止的子进程的进程标识号。
7、随机访问内存（RAM），所有UNIX都将RAM区分为两部分，其中若干兆字节专门用于存储内核映像（内核代码和内核静态数据结构），其余部分通常由虚拟存储器系统来处理。
8、虚拟内存必须解决的一个主要问题是内存碎片，理想情况下，只有当空闲页框数太少时，内存请求才会失败。内核通常被迫使用物理上连续的内存区域。因此，即使有足够的可用内存，但它不能作为一个连续的大内存使用时，内存的请求也会失败。
9、进程的虚拟地址空间，内核分配给进程的虚拟地址空间由以下内存区域组成：程序的可执行代码、程序的初始化数据、程序的未初始化数据、初始程序栈（即用户态栈）、需要共享的库的可执行代码和数据、堆（由程序动态请求的内存）。
第二章 内存寻址   
1、逻辑地址，机器语言指令使用这种地址。每一个逻辑地址都由一个段，和偏移量组成。线性地址，常说的虚拟地址，是一个32位无符号整型，可以表达高达4G的地址。物理地址，芯片级内存单元寻址。
   cpu控制单元通过一种称为分段单元的硬件电路把一个逻辑地址转换成线性地址；接着，第二个成为分页单元的硬件电路，把一个线性地址转换成物理地址。
2、intel处理器能执行两种不同的地址转换模式，分别成为实模式和保护模式。
第三章 进程
1、进程描述符，内核为了管理进程，必须对每个进程所做的事情进行清楚的描述。例如，内核必须知道进程的优先级，给它分配什么样的地址空间，允许它访问哪些文件等。
第四章 中断和异常
1、在intel 80x86手册中，同步和异步中断分别成为异常和中断。
2、大多数异常的处理仅仅是给引起异常的进程发送一个unix信号，要采取的操作因此被延迟，直到进程接收到这个信号。所以内核能很快处理这个异常。这种方法不适合中断。--149